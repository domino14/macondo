// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: api/proto/macondo/experiments.proto

package macondo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BotSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// "hasty", "ml_eval@20250601", "mcts_v3" â€¦
	Algo   string         `protobuf:"bytes,1,opt,name=algo,proto3" json:"algo,omitempty"`
	Params *BotSpecParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"` // e.g. has_simming, has_endgame
	// Free-form parameters (temperature, rollouts, model checksum, etc.)
	FreeformParams map[string]string `protobuf:"bytes,3,rep,name=freeform_params,json=freeformParams,proto3" json:"freeform_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BotSpec) Reset() {
	*x = BotSpec{}
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BotSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotSpec) ProtoMessage() {}

func (x *BotSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotSpec.ProtoReflect.Descriptor instead.
func (*BotSpec) Descriptor() ([]byte, []int) {
	return file_api_proto_macondo_experiments_proto_rawDescGZIP(), []int{0}
}

func (x *BotSpec) GetAlgo() string {
	if x != nil {
		return x.Algo
	}
	return ""
}

func (x *BotSpec) GetParams() *BotSpecParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *BotSpec) GetFreeformParams() map[string]string {
	if x != nil {
		return x.FreeformParams
	}
	return nil
}

type BotSpecParams struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HasSimming    bool                   `protobuf:"varint,1,opt,name=has_simming,json=hasSimming,proto3" json:"has_simming,omitempty"`          // true if this bot can do simming
	HasPreendgame bool                   `protobuf:"varint,2,opt,name=has_preendgame,json=hasPreendgame,proto3" json:"has_preendgame,omitempty"` // true if this bot can do pre-end
	HasEndgame    bool                   `protobuf:"varint,3,opt,name=has_endgame,json=hasEndgame,proto3" json:"has_endgame,omitempty"`          // true if this bot can do endgame
	HasInfer      bool                   `protobuf:"varint,4,opt,name=has_infer,json=hasInfer,proto3" json:"has_infer,omitempty"`                // true if this bot can do rangefinder inference
	SimUseMagpie  bool                   `protobuf:"varint,5,opt,name=sim_use_magpie,json=simUseMagpie,proto3" json:"sim_use_magpie,omitempty"`  // true if simming uses magpie
	MinSimPlies   int32                  `protobuf:"varint,6,opt,name=min_sim_plies,json=minSimPlies,proto3" json:"min_sim_plies,omitempty"`     // min plies for simming
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BotSpecParams) Reset() {
	*x = BotSpecParams{}
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BotSpecParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BotSpecParams) ProtoMessage() {}

func (x *BotSpecParams) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BotSpecParams.ProtoReflect.Descriptor instead.
func (*BotSpecParams) Descriptor() ([]byte, []int) {
	return file_api_proto_macondo_experiments_proto_rawDescGZIP(), []int{1}
}

func (x *BotSpecParams) GetHasSimming() bool {
	if x != nil {
		return x.HasSimming
	}
	return false
}

func (x *BotSpecParams) GetHasPreendgame() bool {
	if x != nil {
		return x.HasPreendgame
	}
	return false
}

func (x *BotSpecParams) GetHasEndgame() bool {
	if x != nil {
		return x.HasEndgame
	}
	return false
}

func (x *BotSpecParams) GetHasInfer() bool {
	if x != nil {
		return x.HasInfer
	}
	return false
}

func (x *BotSpecParams) GetSimUseMagpie() bool {
	if x != nil {
		return x.SimUseMagpie
	}
	return false
}

func (x *BotSpecParams) GetMinSimPlies() int32 {
	if x != nil {
		return x.MinSimPlies
	}
	return 0
}

type AutoplayJob struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Players       []*BotSpec             `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`                    // size 2
	NumGames      int32                  `protobuf:"varint,2,opt,name=num_games,json=numGames,proto3" json:"num_games,omitempty"` // e.g. 100
	RandomSeed    int64                  `protobuf:"varint,3,opt,name=random_seed,json=randomSeed,proto3" json:"random_seed,omitempty"`
	SaveEvals     bool                   `protobuf:"varint,4,opt,name=save_evals,json=saveEvals,proto3" json:"save_evals,omitempty"`         // store EvalRequest/response per ply?
	ExperimentId  string                 `protobuf:"bytes,5,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"` // "leave-ablation-v2"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AutoplayJob) Reset() {
	*x = AutoplayJob{}
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoplayJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoplayJob) ProtoMessage() {}

func (x *AutoplayJob) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoplayJob.ProtoReflect.Descriptor instead.
func (*AutoplayJob) Descriptor() ([]byte, []int) {
	return file_api_proto_macondo_experiments_proto_rawDescGZIP(), []int{2}
}

func (x *AutoplayJob) GetPlayers() []*BotSpec {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *AutoplayJob) GetNumGames() int32 {
	if x != nil {
		return x.NumGames
	}
	return 0
}

func (x *AutoplayJob) GetRandomSeed() int64 {
	if x != nil {
		return x.RandomSeed
	}
	return 0
}

func (x *AutoplayJob) GetSaveEvals() bool {
	if x != nil {
		return x.SaveEvals
	}
	return false
}

func (x *AutoplayJob) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

type JobBundle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Jobs          []*AutoplayJob         `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	EngineVersion string                 `protobuf:"bytes,2,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"` // "macondo-0.9.7"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobBundle) Reset() {
	*x = JobBundle{}
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobBundle) ProtoMessage() {}

func (x *JobBundle) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobBundle.ProtoReflect.Descriptor instead.
func (*JobBundle) Descriptor() ([]byte, []int) {
	return file_api_proto_macondo_experiments_proto_rawDescGZIP(), []int{3}
}

func (x *JobBundle) GetJobs() []*AutoplayJob {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *JobBundle) GetEngineVersion() string {
	if x != nil {
		return x.EngineVersion
	}
	return ""
}

type GameResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Spec          *AutoplayJob           `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Games         []*GameHistory         `protobuf:"bytes,2,rep,name=games,proto3" json:"games,omitempty"`
	Stats         map[string]string      `protobuf:"bytes,3,rep,name=stats,proto3" json:"stats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // n/s, host CPU, wall-clock
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameResult) Reset() {
	*x = GameResult{}
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameResult) ProtoMessage() {}

func (x *GameResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameResult.ProtoReflect.Descriptor instead.
func (*GameResult) Descriptor() ([]byte, []int) {
	return file_api_proto_macondo_experiments_proto_rawDescGZIP(), []int{4}
}

func (x *GameResult) GetSpec() *AutoplayJob {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *GameResult) GetGames() []*GameHistory {
	if x != nil {
		return x.Games
	}
	return nil
}

func (x *GameResult) GetStats() map[string]string {
	if x != nil {
		return x.Stats
	}
	return nil
}

// These are the evals for ONE candidate move calculated during the turn
type CandidateEval struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MoveCgp       string                 `protobuf:"bytes,1,opt,name=move_cgp,json=moveCgp,proto3" json:"move_cgp,omitempty"` // "8H/HELLO"
	Equity        float32                `protobuf:"fixed32,2,opt,name=equity,proto3" json:"equity,omitempty"`                // e.g. +37.4
	WinProb       float32                `protobuf:"fixed32,3,opt,name=win_prob,json=winProb,proto3" json:"win_prob,omitempty"`
	Sims          uint32                 `protobuf:"varint,4,opt,name=sims,proto3" json:"sims,omitempty"`                                       // roll-outs used
	IsPlayedMove  bool                   `protobuf:"varint,5,opt,name=is_played_move,json=isPlayedMove,proto3" json:"is_played_move,omitempty"` // true for the move committed to GameHistory
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CandidateEval) Reset() {
	*x = CandidateEval{}
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CandidateEval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandidateEval) ProtoMessage() {}

func (x *CandidateEval) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandidateEval.ProtoReflect.Descriptor instead.
func (*CandidateEval) Descriptor() ([]byte, []int) {
	return file_api_proto_macondo_experiments_proto_rawDescGZIP(), []int{5}
}

func (x *CandidateEval) GetMoveCgp() string {
	if x != nil {
		return x.MoveCgp
	}
	return ""
}

func (x *CandidateEval) GetEquity() float32 {
	if x != nil {
		return x.Equity
	}
	return 0
}

func (x *CandidateEval) GetWinProb() float32 {
	if x != nil {
		return x.WinProb
	}
	return 0
}

func (x *CandidateEval) GetSims() uint32 {
	if x != nil {
		return x.Sims
	}
	return 0
}

func (x *CandidateEval) GetIsPlayedMove() bool {
	if x != nil {
		return x.IsPlayedMove
	}
	return false
}

// Everything we recorded for ONE TURN
type TurnEval struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TurnIndex     uint32                 `protobuf:"varint,1,opt,name=turn_index,json=turnIndex,proto3" json:"turn_index,omitempty"` // aligns with GameHistory.events
	TopK          []*CandidateEval       `protobuf:"bytes,2,rep,name=top_k,json=topK,proto3" json:"top_k,omitempty"`                 // usually k â‰¤ 10
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TurnEval) Reset() {
	*x = TurnEval{}
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TurnEval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnEval) ProtoMessage() {}

func (x *TurnEval) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnEval.ProtoReflect.Descriptor instead.
func (*TurnEval) Descriptor() ([]byte, []int) {
	return file_api_proto_macondo_experiments_proto_rawDescGZIP(), []int{6}
}

func (x *TurnEval) GetTurnIndex() uint32 {
	if x != nil {
		return x.TurnIndex
	}
	return 0
}

func (x *TurnEval) GetTopK() []*CandidateEval {
	if x != nil {
		return x.TopK
	}
	return nil
}

// File that accompanies a GameHistory
type GameEvaluations struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GameUid       string                 `protobuf:"bytes,1,opt,name=game_uid,json=gameUid,proto3" json:"game_uid,omitempty"`       // copy of GameHistory.uid
	EngineVer     string                 `protobuf:"bytes,2,opt,name=engine_ver,json=engineVer,proto3" json:"engine_ver,omitempty"` // "macondo-0.9.7"
	Turns         []*TurnEval            `protobuf:"bytes,3,rep,name=turns,proto3" json:"turns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameEvaluations) Reset() {
	*x = GameEvaluations{}
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameEvaluations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEvaluations) ProtoMessage() {}

func (x *GameEvaluations) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_macondo_experiments_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEvaluations.ProtoReflect.Descriptor instead.
func (*GameEvaluations) Descriptor() ([]byte, []int) {
	return file_api_proto_macondo_experiments_proto_rawDescGZIP(), []int{7}
}

func (x *GameEvaluations) GetGameUid() string {
	if x != nil {
		return x.GameUid
	}
	return ""
}

func (x *GameEvaluations) GetEngineVer() string {
	if x != nil {
		return x.EngineVer
	}
	return ""
}

func (x *GameEvaluations) GetTurns() []*TurnEval {
	if x != nil {
		return x.Turns
	}
	return nil
}

var File_api_proto_macondo_experiments_proto protoreflect.FileDescriptor

const file_api_proto_macondo_experiments_proto_rawDesc = "" +
	"\n" +
	"#api/proto/macondo/experiments.proto\x12\amacondo\x1a\x1fapi/proto/macondo/macondo.proto\"\xdf\x01\n" +
	"\aBotSpec\x12\x12\n" +
	"\x04algo\x18\x01 \x01(\tR\x04algo\x12.\n" +
	"\x06params\x18\x02 \x01(\v2\x16.macondo.BotSpecParamsR\x06params\x12M\n" +
	"\x0ffreeform_params\x18\x03 \x03(\v2$.macondo.BotSpec.FreeformParamsEntryR\x0efreeformParams\x1aA\n" +
	"\x13FreeformParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xdf\x01\n" +
	"\rBotSpecParams\x12\x1f\n" +
	"\vhas_simming\x18\x01 \x01(\bR\n" +
	"hasSimming\x12%\n" +
	"\x0ehas_preendgame\x18\x02 \x01(\bR\rhasPreendgame\x12\x1f\n" +
	"\vhas_endgame\x18\x03 \x01(\bR\n" +
	"hasEndgame\x12\x1b\n" +
	"\thas_infer\x18\x04 \x01(\bR\bhasInfer\x12$\n" +
	"\x0esim_use_magpie\x18\x05 \x01(\bR\fsimUseMagpie\x12\"\n" +
	"\rmin_sim_plies\x18\x06 \x01(\x05R\vminSimPlies\"\xbb\x01\n" +
	"\vAutoplayJob\x12*\n" +
	"\aplayers\x18\x01 \x03(\v2\x10.macondo.BotSpecR\aplayers\x12\x1b\n" +
	"\tnum_games\x18\x02 \x01(\x05R\bnumGames\x12\x1f\n" +
	"\vrandom_seed\x18\x03 \x01(\x03R\n" +
	"randomSeed\x12\x1d\n" +
	"\n" +
	"save_evals\x18\x04 \x01(\bR\tsaveEvals\x12#\n" +
	"\rexperiment_id\x18\x05 \x01(\tR\fexperimentId\"\\\n" +
	"\tJobBundle\x12(\n" +
	"\x04jobs\x18\x01 \x03(\v2\x14.macondo.AutoplayJobR\x04jobs\x12%\n" +
	"\x0eengine_version\x18\x02 \x01(\tR\rengineVersion\"\xd2\x01\n" +
	"\n" +
	"GameResult\x12(\n" +
	"\x04spec\x18\x01 \x01(\v2\x14.macondo.AutoplayJobR\x04spec\x12*\n" +
	"\x05games\x18\x02 \x03(\v2\x14.macondo.GameHistoryR\x05games\x124\n" +
	"\x05stats\x18\x03 \x03(\v2\x1e.macondo.GameResult.StatsEntryR\x05stats\x1a8\n" +
	"\n" +
	"StatsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x97\x01\n" +
	"\rCandidateEval\x12\x19\n" +
	"\bmove_cgp\x18\x01 \x01(\tR\amoveCgp\x12\x16\n" +
	"\x06equity\x18\x02 \x01(\x02R\x06equity\x12\x19\n" +
	"\bwin_prob\x18\x03 \x01(\x02R\awinProb\x12\x12\n" +
	"\x04sims\x18\x04 \x01(\rR\x04sims\x12$\n" +
	"\x0eis_played_move\x18\x05 \x01(\bR\fisPlayedMove\"V\n" +
	"\bTurnEval\x12\x1d\n" +
	"\n" +
	"turn_index\x18\x01 \x01(\rR\tturnIndex\x12+\n" +
	"\x05top_k\x18\x02 \x03(\v2\x16.macondo.CandidateEvalR\x04topK\"t\n" +
	"\x0fGameEvaluations\x12\x19\n" +
	"\bgame_uid\x18\x01 \x01(\tR\agameUid\x12\x1d\n" +
	"\n" +
	"engine_ver\x18\x02 \x01(\tR\tengineVer\x12'\n" +
	"\x05turns\x18\x03 \x03(\v2\x11.macondo.TurnEvalR\x05turnsB3Z1github.com/domino14/macondo/gen/api/proto/macondob\x06proto3"

var (
	file_api_proto_macondo_experiments_proto_rawDescOnce sync.Once
	file_api_proto_macondo_experiments_proto_rawDescData []byte
)

func file_api_proto_macondo_experiments_proto_rawDescGZIP() []byte {
	file_api_proto_macondo_experiments_proto_rawDescOnce.Do(func() {
		file_api_proto_macondo_experiments_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_macondo_experiments_proto_rawDesc), len(file_api_proto_macondo_experiments_proto_rawDesc)))
	})
	return file_api_proto_macondo_experiments_proto_rawDescData
}

var file_api_proto_macondo_experiments_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_proto_macondo_experiments_proto_goTypes = []any{
	(*BotSpec)(nil),         // 0: macondo.BotSpec
	(*BotSpecParams)(nil),   // 1: macondo.BotSpecParams
	(*AutoplayJob)(nil),     // 2: macondo.AutoplayJob
	(*JobBundle)(nil),       // 3: macondo.JobBundle
	(*GameResult)(nil),      // 4: macondo.GameResult
	(*CandidateEval)(nil),   // 5: macondo.CandidateEval
	(*TurnEval)(nil),        // 6: macondo.TurnEval
	(*GameEvaluations)(nil), // 7: macondo.GameEvaluations
	nil,                     // 8: macondo.BotSpec.FreeformParamsEntry
	nil,                     // 9: macondo.GameResult.StatsEntry
	(*GameHistory)(nil),     // 10: macondo.GameHistory
}
var file_api_proto_macondo_experiments_proto_depIdxs = []int32{
	1,  // 0: macondo.BotSpec.params:type_name -> macondo.BotSpecParams
	8,  // 1: macondo.BotSpec.freeform_params:type_name -> macondo.BotSpec.FreeformParamsEntry
	0,  // 2: macondo.AutoplayJob.players:type_name -> macondo.BotSpec
	2,  // 3: macondo.JobBundle.jobs:type_name -> macondo.AutoplayJob
	2,  // 4: macondo.GameResult.spec:type_name -> macondo.AutoplayJob
	10, // 5: macondo.GameResult.games:type_name -> macondo.GameHistory
	9,  // 6: macondo.GameResult.stats:type_name -> macondo.GameResult.StatsEntry
	5,  // 7: macondo.TurnEval.top_k:type_name -> macondo.CandidateEval
	6,  // 8: macondo.GameEvaluations.turns:type_name -> macondo.TurnEval
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_api_proto_macondo_experiments_proto_init() }
func file_api_proto_macondo_experiments_proto_init() {
	if File_api_proto_macondo_experiments_proto != nil {
		return
	}
	file_api_proto_macondo_macondo_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_macondo_experiments_proto_rawDesc), len(file_api_proto_macondo_experiments_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_proto_macondo_experiments_proto_goTypes,
		DependencyIndexes: file_api_proto_macondo_experiments_proto_depIdxs,
		MessageInfos:      file_api_proto_macondo_experiments_proto_msgTypes,
	}.Build()
	File_api_proto_macondo_experiments_proto = out.File
	file_api_proto_macondo_experiments_proto_goTypes = nil
	file_api_proto_macondo_experiments_proto_depIdxs = nil
}
